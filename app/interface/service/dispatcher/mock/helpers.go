// Code generated by MockGen. DO NOT EDIT.
// Source: helpers.go
//
// Generated by this command:
//
//	mockgen -source=helpers.go -destination=mock/helpers.go
//

// Package mock_dispatcher is a generated GoMock package.
package mock_dispatcher

import (
	protocol "faraway/wow/pkg/protocol"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockEncoder) Marshal(v any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockEncoderMockRecorder) Marshal(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockEncoder)(nil).Marshal), v)
}

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// Unmarshal mocks base method.
func (m *MockDecoder) Unmarshal(data []byte, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockDecoderMockRecorder) Unmarshal(data, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockDecoder)(nil).Unmarshal), data, v)
}

// MockStreamDecoder is a mock of StreamDecoder interface.
type MockStreamDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockStreamDecoderMockRecorder
}

// MockStreamDecoderMockRecorder is the mock recorder for MockStreamDecoder.
type MockStreamDecoderMockRecorder struct {
	mock *MockStreamDecoder
}

// NewMockStreamDecoder creates a new mock instance.
func NewMockStreamDecoder(ctrl *gomock.Controller) *MockStreamDecoder {
	mock := &MockStreamDecoder{ctrl: ctrl}
	mock.recorder = &MockStreamDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamDecoder) EXPECT() *MockStreamDecoderMockRecorder {
	return m.recorder
}

// GetRaw mocks base method.
func (m *MockStreamDecoder) GetRaw(r io.Reader, buff []byte) (*protocol.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", r, buff)
	ret0, _ := ret[0].(*protocol.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockStreamDecoderMockRecorder) GetRaw(r, buff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockStreamDecoder)(nil).GetRaw), r, buff)
}

// Unmarshal mocks base method.
func (m *MockStreamDecoder) Unmarshal(data []byte, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockStreamDecoderMockRecorder) Unmarshal(data, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockStreamDecoder)(nil).Unmarshal), data, v)
}
