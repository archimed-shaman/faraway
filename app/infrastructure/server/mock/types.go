// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mock/types.go
//

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	server "faraway/wow/app/infrastructure/server"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResponseWriter is a mock of ResponseWriter interface.
type MockResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterMockRecorder
}

// MockResponseWriterMockRecorder is the mock recorder for MockResponseWriter.
type MockResponseWriterMockRecorder struct {
	mock *MockResponseWriter
}

// NewMockResponseWriter creates a new mock instance.
func NewMockResponseWriter(ctrl *gomock.Controller) *MockResponseWriter {
	mock := &MockResponseWriter{ctrl: ctrl}
	mock.recorder = &MockResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseWriter) EXPECT() *MockResponseWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockResponseWriter) Write(ctx context.Context, data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockResponseWriterMockRecorder) Write(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponseWriter)(nil).Write), ctx, data)
}

// MockResponseReader is a mock of ResponseReader interface.
type MockResponseReader struct {
	ctrl     *gomock.Controller
	recorder *MockResponseReaderMockRecorder
}

// MockResponseReaderMockRecorder is the mock recorder for MockResponseReader.
type MockResponseReaderMockRecorder struct {
	mock *MockResponseReader
}

// NewMockResponseReader creates a new mock instance.
func NewMockResponseReader(ctrl *gomock.Controller) *MockResponseReader {
	mock := &MockResponseReader{ctrl: ctrl}
	mock.recorder = &MockResponseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseReader) EXPECT() *MockResponseReaderMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockResponseReader) Data() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockResponseReaderMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockResponseReader)(nil).Data))
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// OnConnect mocks base method.
func (m *MockService) OnConnect(ctx context.Context, w server.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConnect", ctx, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnConnect indicates an expected call of OnConnect.
func (mr *MockServiceMockRecorder) OnConnect(ctx, w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConnect", reflect.TypeOf((*MockService)(nil).OnConnect), ctx, w)
}

// OnData mocks base method.
func (m *MockService) OnData(ctx context.Context, r server.ResponseReader, w server.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnData", ctx, r, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnData indicates an expected call of OnData.
func (mr *MockServiceMockRecorder) OnData(ctx, r, w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnData", reflect.TypeOf((*MockService)(nil).OnData), ctx, r, w)
}

// OnDisconnect mocks base method.
func (m *MockService) OnDisconnect(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDisconnect", ctx)
}

// OnDisconnect indicates an expected call of OnDisconnect.
func (mr *MockServiceMockRecorder) OnDisconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDisconnect", reflect.TypeOf((*MockService)(nil).OnDisconnect), ctx)
}
